FORMAT: 1A
HOST: http://api.tidepool.io

# Tidepool Seagull
**"An archive is a dump without the seagulls."** -- *Perfesser Shoe, 1990 (McNally)*

## Overview

Seagull stores metadata about users. 

Initially, it just stores blobs of JSON bound to a user ID, but the intent is that said blobs will have specific, 
versionable format types that will be registered with the API and enforced by it.

Please see the [documentation currently in Tidepool's central repository](https://github.com/tidepool-org/central/blob/master/White-Papers/ServerSideDataOrganization.md)
for further details on the data format. This is not publicly accessible yet, but will be moved to an accessible place soon.

General philosophy / notes:

* You can get a profile and get a block of data that excludes the subdocuments like groups and private.
* You can set a profile and the subdocuments persist. Any fields you add at the top level are added. You can delete a field by setting its value to null.
* There's a /meta/group that lets you assign a group name and a group ID. There are a set of current groups defined in the documentation, but the group call will let you use any name. Groups are manipulated with the group API.
* There's a /meta/private that is identical to the one in the user API.

We follow many of the usual RESTful guidelines.
* CRUD semantics:
   * Creation is done with POST; an existing record cannot be overwritten by a POST. If the record was created, you get a 201 and the created record is returned in the body. 
   If the creation is for a subrecord and the main record cannot be found, you get a 404. If the record already exists, you get a 422. 
   * Read is done with GET. If not found, 404. If found, result is 200 with the record in the body.
   * Update is done with PUT. Record must exist - we do not have "upsert" semantics. Missing record is 404, successful update is 200 with the 
   updated record returned. If Delete is supported, subrecords can be deleted by setting the value to null, or by using Delete.
   * Delete is done with DELETE, but isn't always supported. We don't want to be deleting customer data without having a solid understanding 
   of why we're doing it and how to do it safely. In the short term, we just disallow it. But in the long term, we should let people 
   make their data go away if they really want it to. Successful DELETE returns a 204 (no data to delete)





## Notes for the blip pilot study release

The intent is that metadata will NOT include demographic information -- that will be found in a separate endpoint managed through the
/metadata/private/patient id/hash pair. But for the pilot, we're going to store metadata in this database. 

The schema we should use is as follows:

```
            {
                "fullname": "Jonathan Livingston", 
                "shortname": "Jonny", 
                "publicbio": "I fly far and fast. T1D is something I have, not who I am.",
                "image_url": "https://files.tidepool.io/87263b8476fad2836486af125/me.jpg",
                "patient": {
                    "sharable": false,
                    "health": {
                        diagnosisDate: "2010-08-10"
                    },
                    "demographic": {
                        birthDate: "1986-04-01",
                        country: "US",
                        region: "California",
                        postalcode: "94110",
                        gender: "male",
                    }
                }
            }    
```

All demographic fields are optional and should support a null value or a missing field.

The sharable flag should default to false. It would be nice to have it in the UI with a question something like:
**May we share your demographic information anonymously with health researchers?** But if that raises too many questions for the pilot, we
can just leave it as false for the pilot study.



# Group Metadata
Stores and retrieves blobs of JSON.

## Metadata Collection [/metadata/collections]
### Get permissible collections [GET]
Retrieves the set of allowed collection names. Initially, this is only 'profile'. 
Someday this will also return the definitions of schema for the collections. But not yet.

+ Request

    A current session token must come from the user-api. This can be a user token, in which case only specific information for that user is accessible, or it can be a server token, which has access to all user data.

    + Headers

            x-tidepool-session-token : 23sadf87.123840.aasd90JKj

+ Response 200

        [
            "profile"
        ]

## Metadata Manipulation [/metadata/{userid}/{collection}]

The main metadata block of information is managed here. Groups and Private have special endpoints.

### Create a metadata record [POST]

+ Parameters
    + collection (required, string, `profile`) ... A collection type from one of the registered types. Initially, this is only 'profile'.
    + userid (required, string, `userid`) ... The userid for the user for whom this data is being stored. The API will look up the user's meta 
    information. A server can look up any user, but a user token can only look up the user associated with the token.

+ Request
    + Headers

            x-tidepool-session-token : 23sadf87.123840.aasd90JKj

    + Body

            {
                "fullname": "Jonathan Livingston", 
                "shortname": "Jonny", 
                "publicbio": "I fly far and fast. T1D is something I have, not who I am.",
                "image_url": "https://files.tidepool.io/87263b8476fad2836486af125/me.jpg",
            }    

+ Response 201

        If the record was created.

+ Response 422

        If the record could not be created because a record with that value already exists

### Update a metadata record [PUT]
+ Parameters
    + collection (required, string, `profile`) ... A collection type from one of the registered types. Initially, this is only 'profile'.
    + userid (required, string, `userid`) ... The userid for the user for whom this data is being stored. 

+ Request
Body should contain only the fields that should be updated. They must be fields in the schema. 

    + Headers

            x-tidepool-session-token : 23sadf87.123840.aasd90JKj

    + Body

            {
                "summary": "Burrito ergo sum."
            }    

+ Response 200

        If the record was updated. 

+ Response 404

        If the record addressed could not be found in the database.

### Retrieve a metadata record [GET]
+ Parameters
    + collection (required, string, `profile`) ... A collection type from one of the registered types. Initially, this is only 'profile'.
    + userid (required, string, `metaid`) ... The userid for the user for whom this data is being stored. 

+ Request
    + Headers

            x-tidepool-session-token : 23sadf87.123840.aasd90JKj


+ Response 200 (application/json)

        If the record was retrieved.


            {
                "fullname": "Jonathan Livingston", 
                "shortname": "Jonny", 
                "publicbio": "I fly far and fast. T1D is something I have, not who I am.",
                "image_url": "https://files.tidepool.io/87263b8476fad2836486af125/me.jpg",
            }    

+ Response 404

        If the record was not found.

### Remove a metadata record (NOT IMPLEMENTED) [DELETE]
+ Parameters
    + collection (required, string, `profile`) ... A collection type from one of the registered types. Initially, this is only 'profile'.
    + userid (required, string, `userid`) ... The userid for the user for whom this data is being stored. 

+ Request
    + Headers

            x-tidepool-session-token : 23sadf87.123840.aasd90JKj

+ Response 501

        This function is currently not implemented.

+ Response 200

        If the record was retrieved.

+ Response 404

        If the record was not found.

## Group Data Manipulation [/metadata/group/{userid}/{collection}/{name}]

Where a body is required, it should contain an object with the field 'id' -- the id value will be stored in the group.


### Create a group record [POST]
+ Parameters
    + collection (required, string, `profile`) ... A collection type from one of the registered types. Initially, this is only 'profile'.
    + userid (required, string, `userid`) ... The userid for the user for whom this data is being stored. The API will look up the user's meta 
    information. A server can look up any user, but a user token can only look up the user associated with the token.
    + name (required, string, `team`) ... The name of the group record. Any name is legal. Currently defined are team, uploaders, viewers, patients, invited, invitedby.

+ Request
    + Headers

            x-tidepool-session-token : 23sadf87.123840.aasd90JKj

    + Body

            {
                id: "2423412"
            }    

+ Response 201

        If the record was created.

+ Response 422

        If the record could not be created because a record with that name already exists

### Retrieve a group record [GET]
+ Parameters
    + collection (required, string, `profile`) ... A collection type from one of the registered types. Initially, this is only 'profile'.
    + userid (required, string, `metaid`) ... The userid for the user for whom this data is being stored. 
    + name (required, string, `team`) ... The name of the group record. Any name is legal. Currently defined are team, uploaders, viewers, patients, invited, invitedby.

+ Request
    + Headers

            x-tidepool-session-token : 23sadf87.123840.aasd90JKj


+ Response 200 (application/json)

        If the record was retrieved.


            {
                "fullname": "Jonathan Livingston", 
                "shortname": "Jonny", 
                "publicbio": "I fly far and fast. T1D is something I have, not who I am.",
                "image_url": "https://files.tidepool.io/87263b8476fad2836486af125/me.jpg",
            }    

+ Response 404

        If the record was not found.

### Update a group record [PUT]
+ Parameters
    + collection (required, string, `profile`) ... A collection type from one of the registered types. Initially, this is only 'profile'.
    + userid (required, string, `userid`) ... The userid for the user for whom this data is being stored. 
    + name (required, string, `team`) ... The name of the group record. Any name is legal. Currently defined are team, uploaders, viewers, patients, invited, invitedby.

+ Request

    + Headers

            x-tidepool-session-token : 23sadf87.123840.aasd90JKj

    + Body

            {
                id: "1238ac63"
            }    

+ Response 200

        If the record was updated. 

+ Response 404

        If the record addressed could not be found in the database.

### Remove a group record (NOT IMPLEMENTED) [DELETE]
+ Parameters
    + collection (required, string, `profile`) ... A collection type from one of the registered types. Initially, this is only 'profile'.
    + userid (required, string, `userid`) ... The userid for the user for whom this data is being stored. 
    + name (required, string, `team`) ... The name of the group record. Any name is legal. Currently defined are team, uploaders, viewers, patients, invited, invitedby.

+ Request
    + Headers

            x-tidepool-session-token : 23sadf87.123840.aasd90JKj

+ Response 204

+ Response 404

        If the record was not found.

## Private Pair Manipulation [/metadata/private/{userid}/{collection}/{name}]

Where a body is required, it should contain an object with the field 'id' -- the id value will be stored in the group.


### Create (generate) a private record [POST]
+ Parameters
    + collection (required, string, `profile`) ... A collection type from one of the registered types. Initially, this is only 'profile'.
    + userid (required, string, `userid`) ... The userid for the user for whom this data is being stored. The API will look up the user's meta 
    information. A server can look up any user, but a user token can only look up the user associated with the token.
    + name (required, string, `sandcastle`) ... The name of the private record. Any name is legal. Currently defined are patient, sandcastle.

+ Request
    + Headers

            x-tidepool-session-token : 23sadf87.123840.aasd90JKj

+ Response 201

    + Body

            {
                id: "2423412",
                hash: "69fd718d9aa9a487e6142e21"
            }    

+ Response 404

        If the metadata record corresponding to the user specified was not found in the database.


+ Response 422

        If the private record could not be created because a record with that name already exists in this user's metadata.

### Retrieve a private record [GET]
+ Parameters
    + collection (required, string, `profile`) ... A collection type from one of the registered types. Initially, this is only 'profile'.
    + userid (required, string, `metaid`) ... The userid for the user for whom this data is being stored. 
    + name (required, string, `sandcastle`) ... The name of the private record. Any name is legal. Currently defined are patient, sandcastle.

+ Request
    + Headers

            x-tidepool-session-token : 23sadf87.123840.aasd90JKj


+ Response 200 (application/json)


    + Body

            {
                id: "2423412",
                hash: "69fd718d9aa9a487e6142e21"
            }    


+ Response 404

        If the userid was not found or the record was not found in that userid.

### Update a group record (NOT IMPLEMENTED) [PUT]
+ Parameters
    + collection (required, string, `profile`) ... A collection type from one of the registered types. Initially, this is only 'profile'.
    + userid (required, string, `userid`) ... The userid for the user for whom this data is being stored. 
    + name (required, string, `sandcastle`) ... The name of the private record. Any name is legal. Currently defined are patient, sandcastle.

+ Request

    + Headers

            x-tidepool-session-token : 23sadf87.123840.aasd90JKj

    + Body

    + Body

            {
                id: "2423412",
                hash: "69fd718d9aa9a487e6142e21"
            }    

+ Response 501

        This endpoint has not yet been implemented.


+ Response 200

        If the record was updated. 

+ Response 404

        If the record addressed could not be found in the database.

### Remove a group record (NOT IMPLEMENTED) [DELETE]
+ Parameters
    + collection (required, string, `profile`) ... A collection type from one of the registered types. Initially, this is only 'profile'.
    + userid (required, string, `userid`) ... The userid for the user for whom this data is being stored. 
    + name (required, string, `sandcastle`) ... The name of the private record. Any name is legal. Currently defined are patient, sandcastle.

+ Request
    + Headers

            x-tidepool-session-token : 23sadf87.123840.aasd90JKj

+ Response 501

        This endpoint has not yet been implemented.

+ Response 204

+ Response 404

        If the record was not found.





